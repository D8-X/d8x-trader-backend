// This is your Prisma schema file, learn more about it in the docs:
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum trade_side{
  buy
  sell
  liquidate_buy
  liquidate_sell
}


// Decimal with 40 precision is used for int128 fields, since 128 bit number can
// have 39 digits.
model Trade{
  @@map("trades_history")
  id BigInt @id @default(autoincrement())
  // Wallet address of user 
  trader_addr String @db.VarChar(42)
  perpetual_id Int 
  chain_id Int
  side trade_side
  // Order flags will be present only for trade events
  order_flags BigInt @default(0) 
  // price is stored in ABDK format
  price Decimal @db.Decimal(40,0) 
  // quantity (base currency) is stored in ABDK format
  quantity Decimal @db.Decimal(40,0) 
  // quantity_cc (collateral currency) is stored in ABDK format
  quantity_cc Decimal? @db.Decimal(40,0)
  // fee is stored in ABDK format
  fee Decimal @db.Decimal(40,0)
  // brokerFeeTbps is stored in tenth of 1 basis point (1e-5)
  broker_fee_tbps Int
  broker_addr String @db.VarChar(42) @default("")
  // realized profit is stored in ABDK format
  realized_profit Decimal @db.Decimal(40,0)
  order_digest_hash String @db.Text 
  tx_hash String @db.Text 
  trade_timestamp DateTime @db.Timestamptz @default(now())

  @@index([trader_addr], type: Hash)
  @@index([tx_hash], type: Hash)
  @@index([trade_timestamp])
}

model FundingRatePayment{
  @@map("funding_rate_payments")
  id BigInt @id @default(autoincrement())
  trader_addr String @db.VarChar(42)
  perpetual_id Int
  // amount can be negative - user paid
  payment_amount  Decimal @db.Decimal(40,0)
  payment_timestamp DateTime @db.Timestamptz @default(now())
  tx_hash String @db.Text 

  @@index([tx_hash], type: Hash)
}

enum  estimated_earnings_event_type{
    liquidity_added
    liquidity_removed
    share_token_p2p_transfer
}


model EstimatedEarningTokens{
    @@map("estimated_earnings_tokens")
    id BigInt @id @default(autoincrement())
    liq_provider_addr String @db.VarChar(42)
    // liquidity pool id
    pool_id Int
    tx_hash String @db.Text    
    token_amount Decimal @db.Decimal(40,0)
    created_at DateTime @db.Timestamptz @default(now())

    event_type estimated_earnings_event_type

    @@index([tx_hash], type: Hash)
    @@index([liq_provider_addr], type: Hash)
    @@index([pool_id], type: Hash)
}

model Price{
    @@map("price_info")
    id BigInt @id @default(autoincrement())
    pool_token_price Float @db.DoublePrecision
    // pool id
    pool_id Int
    timestamp DateTime @db.Timestamptz @default(now())

    @@index([pool_id], type: Hash)
    @@index([timestamp])
}

model LiquidityWithdrawal{
    @@map("liquidity_withdrawals")
    id BigInt @id @default(autoincrement())
    liq_provider_addr String @db.VarChar(42)
    pool_id Int
    amount Decimal @db.Decimal(40, 0)
    tx_hash String @db.Text    
    is_removal Boolean
    timestamp DateTime @db.Timestamptz @default(now())
    
    @@index([pool_id], type:Hash)
    @@index([liq_provider_addr], type:Hash)
    @@index([timestamp])
}


model MarginTokenInfo {
  @@map("margin_token_info")
  pool_id Int @id
  token_addr String @db.VarChar(42)
  token_name String @db.VarChar(20)
  token_decimals Int
}

// referral codes are "globally unique" (the code is a database key)
// e.g., they apply to all pools
model ReferralCode {
  @@map("referral_code")
  code String @id @db.VarChar(200)
  referrer_addr String @db.VarChar(42)
  agency_addr String? @db.VarChar(42)
  broker_addr String @db.VarChar(42)
  broker_payout_addr String @db.VarChar(42)
  created_on DateTime @db.Timestamptz @default(now())
  expiry DateTime @db.Timestamptz @default("2042-04-24T04:42:42+02:00")
  trader_rebate_perc Decimal @db.Decimal(5,2) @default(0)
  referrer_rebate_perc Decimal @db.Decimal(5,2) @default(0)
  agency_rebate_perc Decimal @db.Decimal(5,2) @default(0)
  @@index([referrer_addr], type: Hash)
  @@index([agency_addr], type: Hash)
  @@index([broker_addr], type: Hash)
  // 0 to many relationships
  referral_code_usage ReferralCodeUsage[]
  referral_payments ReferralPayment[]
}

// current code registered for trader
model ReferralCodeUsage {
  @@map("referral_code_usage")
  trader_addr String @id @db.VarChar(200)
  referral_code ReferralCode @relation(fields: [code], references: [code]) 
  code String @db.VarChar(200)
  timestamp DateTime @db.Timestamptz @default(now())
}

model ReferralPayment {
  @@map("referral_payment")
  trader_addr String @db.VarChar(42)
  broker_addr String @db.VarChar(42)
  referral_code ReferralCode @relation(fields: [code], references: [code])
  code String @db.VarChar(200)
  pool_id Int
  timestamp DateTime @db.Timestamptz @default(now())
  // payment in token's number format, single transaction
  trader_paid_amount_cc Decimal @db.Decimal(40, 0)
  broker_paid_amount_cc Decimal @db.Decimal(40, 0)
  agency_paid_amount_cc Decimal @db.Decimal(40, 0)
  referrer_paid_amount_cc Decimal @db.Decimal(40, 0)
  tx_hash String @db.Text
  @@id([trader_addr, pool_id, timestamp])
  @@index([timestamp])
  @@index([pool_id])
  @@index([trader_addr])
}
