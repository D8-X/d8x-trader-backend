// This is your Prisma schema file, learn more about it in the docs:
// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum trade_side{
  buy
  sell
  liquidate_buy
  liquidate_sell
}


// Decimal with 40 precision is used for int128 fields, since 128 bit number can
// have 39 digits.
model Trade{
  @@map("trades_history")
  // Wallet address of user 
  trader_addr String @db.VarChar(42)
  perpetual_id Int 
  chain_id Int
  side trade_side
  // Order flags will be present only for trade events
  order_flags BigInt @default(0) 
  // price is stored in ABDK format
  price Decimal @db.Decimal(40,0) 
  // quantity (base currency) is stored in ABDK format
  quantity Decimal @db.Decimal(40,0) 
  // quantity_cc (collateral currency) is stored in ABDK format
  quantity_cc Decimal? @db.Decimal(40,0)
  // fee is stored in ABDK format
  fee Decimal @db.Decimal(40,0)
  // brokerFeeTbps is stored in tenth of 1 basis point (1e-5)
  broker_fee_tbps Int
  broker_addr String @db.VarChar(42) @default("")
  // realized profit is stored in ABDK format
  realized_profit Decimal @db.Decimal(40,0)

  // the order digest is unique and is the key:
  // posting two identical orders (same order_digest_hash) is not
  // possible on chain
  order_digest_hash String @id @db.Text

  tx_hash String @db.Text 
  trade_timestamp DateTime @db.Timestamptz @default(now())

  is_collected_by_event Boolean @default(true)

  @@index([trader_addr], type: Hash)
  @@index([tx_hash], type: Hash)
  @@index([trade_timestamp])
}

model FundingRatePayment{
  @@map("funding_rate_payments")
  trader_addr String @db.VarChar(42)
  perpetual_id Int
  tx_hash String @db.Text
  // amount can be negative - user paid
  payment_amount  Decimal @db.Decimal(40,0)
  payment_timestamp DateTime @db.Timestamptz @default(now())

  is_collected_by_event Boolean @default(true)
  // in the same transaction we have 2 funding rate payments: trader and amm.
  // we therefore use the key as tx_hash and trader_addr
  @@id([trader_addr, tx_hash])
  @@index([perpetual_id])
  @@index([trader_addr], type: Hash)
  @@index([tx_hash], type: Hash)
}

enum  estimated_earnings_event_type{
    liquidity_added
    liquidity_removed
    share_token_p2p_transfer
}


model EstimatedEarningTokens{
    @@map("estimated_earnings_tokens")
    liq_provider_addr String @db.VarChar(42)
    // liquidity pool id
    pool_id Int
    tx_hash String @db.Text    
    token_amount Decimal @db.Decimal(40,0)
    created_at DateTime @db.Timestamptz @default(now())

    event_type estimated_earnings_event_type
    is_collected_by_event Boolean @default(true)
    @@id([pool_id, tx_hash])
    @@index([tx_hash], type: Hash)
    @@index([liq_provider_addr], type: Hash)
    @@index([pool_id], type: Hash)
}

model Price{
    @@map("price_info")
    pool_token_price Float @db.DoublePrecision
    // pool id
    pool_id Int
    timestamp DateTime @db.Timestamptz @default(now())

    @@id([pool_id, timestamp])
    @@index([pool_id], type: Hash)
    @@index([timestamp])
}

model LiquidityWithdrawal{
    @@map("liquidity_withdrawals")
    liq_provider_addr String @db.VarChar(42)
    pool_id Int
    amount Decimal @db.Decimal(40, 0)
    tx_hash String @db.Text    
    is_removal Boolean
    timestamp DateTime @db.Timestamptz @default(now())
    
    is_collected_by_event Boolean @default(true)

    @@id([liq_provider_addr, tx_hash])
    @@index([pool_id], type:Hash)
    @@index([liq_provider_addr], type:Hash)
    @@index([timestamp])
}

model MarginTokenInfo {
  @@map("margin_token_info")
  pool_id Int @id
  token_addr String @db.VarChar(42)
  token_name String @db.VarChar(20)
  token_decimals Int
}